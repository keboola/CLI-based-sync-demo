name: Pulling from Keboola
description: Pulling from Keboola
inputs:
  workdir:
    description: Working directory
    required: true
  kbcUrl:
    description: Keboola Connection Stack URL
    required: true
  kbcStorageApiToken:
    description: Keboola Connection Storage API Token
    required: true
  kbcProjectId:
    description: Keboola Connection Project ID
    required: true
  kbcBranchId:
    description: Keboola Connection Branch ID
    required: true
runs:
  using: "composite"
  steps:
    # Pull remote project's state
    - name: Init data from Keboola connection project
      env:
        # filled by the script
        KBC_STORAGE_API_TOKEN: ${{ inputs.kbcStorageApiToken }}
        KBC_PROJECT_ID: ${{ inputs.kbcProjectId }}
        KBC_BRANCHES: ${{ inputs.kbcBranchId }}
        KBC_STORAGE_API_HOST: ${{ inputs.kbcUrl }}
        WORKDIR: ${{ inputs.workdir }}
      # filled by the script
      id: kbc_init
      run: |
        set -eo pipefail

        # Check, if required environment variables are set
        required_vars=(KBC_STORAGE_API_TOKEN KBC_STORAGE_API_HOST KBC_PROJECT_ID KBC_BRANCHES WORKDIR)
        for var in "${required_vars[@]}"; do
          if [ -z "${!var}" ]; then
            echo "Error: Environment variable $var is not set." >&2
            exit 1
          fi
        done
        
        if [ -f "$WORKDIR/.keboola/manifest.json" ]; then
          echo "Manifest file exists. Pulling..."
          kbc pull -d "$WORKDIR" --force 2>&1 | tee "$RUNNER_TEMP/log.txt"
        else
          echo "Manifest file does not exist. Initializing..."
          # Check if the directory exists
          if [ -d "$WORKDIR" ]; then
            echo "Directory '$WORKDIR' exists. Removing..."
            rm -rf "$WORKDIR"
            if [ $? -eq 0 ]; then
              echo "Directory was successfully removed."
            else
              echo "Failed to remove directory."
              return 1
            fi
          fi
          mkdir -p "$WORKDIR"
          if [ $? -eq 0 ]; then
            echo "Directory was successfully created."
          else
            echo "Failed to create directory."
            return 1
          fi
          kbc init -d "$WORKDIR" --allow-target-env --ci=false --verbose 2>&1 | tee "$RUNNER_TEMP/log.txt"
        fi
      shell: bash